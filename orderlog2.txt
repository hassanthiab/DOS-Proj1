{
    "ID": 2,
    "name": "Xen and the Art of Surviving Undergraduate School.",
    "topic": "undergraduate school",
    "stock": 45,
    "cost": 10
}

{
    "ID": 2,
    "name": "Xen and the Art of Surviving Undergraduate School.",
    "topic": "undergraduate school",
    "stock": 44,
    "cost": 10
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>requests.exceptions.ConnectionError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it')) // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 2491382789024,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "cwJQIGvSnKhG9l47NEc7";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>requests.exceptions.ConnectionError</h1>
<div class="detail">
  <p class="errormsg">requests.exceptions.ConnectionError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-2491382776304">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connection.py"</cite>,
      line <em class="line">174</em>,
      in <code class="function">_new_conn</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self.socket_options:</pre>
<pre class="line before"><span class="ws">            </span>extra_kw[&quot;socket_options&quot;] = self.socket_options</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>conn = connection.create_connection(</pre>
<pre class="line after"><span class="ws">                </span>(self._dns_host, self.port), self.timeout, **extra_kw</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except SocketTimeout:</pre>
<pre class="line after"><span class="ws">            </span>raise ConnectTimeoutError(</pre></div>
</div>

<li><div class="frame" id="frame-2491382777840">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py"</cite>,
      line <em class="line">96</em>,
      in <code class="function">create_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if sock is not None:</pre>
<pre class="line before"><span class="ws">                </span>sock.close()</pre>
<pre class="line before"><span class="ws">                </span>sock = None</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>if err is not None:</pre>
<pre class="line current"><span class="ws">        </span>raise err</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>raise socket.error(&quot;getaddrinfo returns an empty list&quot;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def _set_socket_options(sock, options):</pre></div>
</div>

<li><div class="frame" id="frame-2491382778320">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py"</cite>,
      line <em class="line">86</em>,
      in <code class="function">create_connection</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:</pre>
<pre class="line before"><span class="ws">                </span>sock.settimeout(timeout)</pre>
<pre class="line before"><span class="ws">            </span>if source_address:</pre>
<pre class="line before"><span class="ws">                </span>sock.bind(source_address)</pre>
<pre class="line current"><span class="ws">            </span>sock.connect(sa)</pre>
<pre class="line after"><span class="ws">            </span>return sock</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except socket.error as e:</pre>
<pre class="line after"><span class="ws">            </span>err = e</pre>
<pre class="line after"><span class="ws">            </span>if sock is not None:</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2491382820336">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py"</cite>,
      line <em class="line">699</em>,
      in <code class="function">urlopen</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws">            </span>if is_new_proxy_conn and http_tunnel_required:</pre>
<pre class="line before"><span class="ws">                </span>self._prepare_proxy(conn)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span># Make the request on the httplib connection object.</pre>
<pre class="line current"><span class="ws">            </span>httplib_response = self._make_request(</pre>
<pre class="line after"><span class="ws">                </span>conn,</pre>
<pre class="line after"><span class="ws">                </span>method,</pre>
<pre class="line after"><span class="ws">                </span>url,</pre>
<pre class="line after"><span class="ws">                </span>timeout=timeout_obj,</pre>
<pre class="line after"><span class="ws">                </span>body=body,</pre></div>
</div>

<li><div class="frame" id="frame-2491382820288">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py"</cite>,
      line <em class="line">394</em>,
      in <code class="function">_make_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span># urllib3.request. It also calls makefile (recv) on the socket.</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>if chunked:</pre>
<pre class="line before"><span class="ws">                </span>conn.request_chunked(method, url, **httplib_request_kw)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line current"><span class="ws">                </span>conn.request(method, url, **httplib_request_kw)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># We are swallowing BrokenPipeError (errno.EPIPE) since the server is</pre>
<pre class="line after"><span class="ws">        </span># legitimately able to close the connection after sending a valid response.</pre>
<pre class="line after"><span class="ws">        </span># With this behaviour, the received response is still readable.</pre>
<pre class="line after"><span class="ws">        </span>except BrokenPipeError:</pre></div>
</div>

<li><div class="frame" id="frame-2491382820816">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connection.py"</cite>,
      line <em class="line">239</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span># Avoid modifying the headers passed into .request()</pre>
<pre class="line before"><span class="ws">            </span>headers = headers.copy()</pre>
<pre class="line before"><span class="ws">        </span>if &quot;user-agent&quot; not in (six.ensure_str(k.lower()) for k in headers):</pre>
<pre class="line before"><span class="ws">            </span>headers[&quot;User-Agent&quot;] = _get_default_user_agent()</pre>
<pre class="line current"><span class="ws">        </span>super(HTTPConnection, self).request(method, url, body=body, headers=headers)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def request_chunked(self, method, url, body=None, headers=None):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>Alternative to the common request method, which sends the</pre>
<pre class="line after"><span class="ws">        </span>body with chunked encoding and not as one block</pre></div>
</div>

<li><div class="frame" id="frame-2491382818128">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\http\client.py"</cite>,
      line <em class="line">1253</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self._send_output(message_body, encode_chunked=encode_chunked)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def request(self, method, url, body=None, headers={}, *,</pre>
<pre class="line before"><span class="ws">                </span>encode_chunked=False):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>self._send_request(method, url, body, headers, encode_chunked)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _send_request(self, method, url, body, headers, encode_chunked):</pre>
<pre class="line after"><span class="ws">        </span># Honor explicitly requested Host: and Accept-Encoding: headers.</pre>
<pre class="line after"><span class="ws">        </span>header_names = frozenset(k.lower() for k in headers)</pre>
<pre class="line after"><span class="ws">        </span>skips = {}</pre></div>
</div>

<li><div class="frame" id="frame-2491382818704">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\http\client.py"</cite>,
      line <em class="line">1299</em>,
      in <code class="function">_send_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.putheader(hdr, value)</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(body, str):</pre>
<pre class="line before"><span class="ws">            </span># RFC 2616 Section 3.7.1 says that text default has a</pre>
<pre class="line before"><span class="ws">            </span># default charset of iso-8859-1.</pre>
<pre class="line before"><span class="ws">            </span>body = _encode(body, 'body')</pre>
<pre class="line current"><span class="ws">        </span>self.endheaders(body, encode_chunked=encode_chunked)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def getresponse(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Get the response from the server.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>If the HTTPConnection is in the correct state, returns an</pre></div>
</div>

<li><div class="frame" id="frame-2491362600656">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\http\client.py"</cite>,
      line <em class="line">1248</em>,
      in <code class="function">endheaders</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if self.__state == _CS_REQ_STARTED:</pre>
<pre class="line before"><span class="ws">            </span>self.__state = _CS_REQ_SENT</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>raise CannotSendHeader()</pre>
<pre class="line current"><span class="ws">        </span>self._send_output(message_body, encode_chunked=encode_chunked)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def request(self, method, url, body=None, headers={}, *,</pre>
<pre class="line after"><span class="ws">                </span>encode_chunked=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span>self._send_request(method, url, body, headers, encode_chunked)</pre></div>
</div>

<li><div class="frame" id="frame-2491382820240">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\http\client.py"</cite>,
      line <em class="line">1008</em>,
      in <code class="function">_send_output</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>A message_body may be specified, to be appended to the request.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>self._buffer.extend((b&quot;&quot;, b&quot;&quot;))</pre>
<pre class="line before"><span class="ws">        </span>msg = b&quot;\r\n&quot;.join(self._buffer)</pre>
<pre class="line before"><span class="ws">        </span>del self._buffer[:]</pre>
<pre class="line current"><span class="ws">        </span>self.send(msg)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if message_body is not None:</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span># create a consistent interface to message_body</pre>
<pre class="line after"><span class="ws">            </span>if hasattr(message_body, 'read'):</pre></div>
</div>

<li><div class="frame" id="frame-2491382820048">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\http\client.py"</cite>,
      line <em class="line">948</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>file-like object that supports a .read() method, or an iterable object.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self.sock is None:</pre>
<pre class="line before"><span class="ws">            </span>if self.auto_open:</pre>
<pre class="line current"><span class="ws">                </span>self.connect()</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise NotConnected()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self.debuglevel &gt; 0:</pre>
<pre class="line after"><span class="ws">            </span>print(&quot;send:&quot;, repr(data))</pre></div>
</div>

<li><div class="frame" id="frame-2491382820528">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connection.py"</cite>,
      line <em class="line">205</em>,
      in <code class="function">connect</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self._tunnel()</pre>
<pre class="line before"><span class="ws">            </span># Mark this connection as not reusable</pre>
<pre class="line before"><span class="ws">            </span>self.auto_open = 0</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def connect(self):</pre>
<pre class="line current"><span class="ws">        </span>conn = self._new_conn()</pre>
<pre class="line after"><span class="ws">        </span>self._prepare_conn(conn)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def putrequest(self, method, url, *args, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot; &quot;&quot;&quot;</pre>
<pre class="line after"><span class="ws">        </span># Empty docstring because the indentation of CPython's implementation</pre></div>
</div>

<li><div class="frame" id="frame-2491382820144">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connection.py"</cite>,
      line <em class="line">186</em>,
      in <code class="function">_new_conn</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>&quot;Connection to %s timed out. (connect timeout=%s)&quot;</pre>
<pre class="line before"><span class="ws">                </span>% (self.host, self.timeout),</pre>
<pre class="line before"><span class="ws">            </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>except SocketError as e:</pre>
<pre class="line current"><span class="ws">            </span>raise NewConnectionError(</pre>
<pre class="line after"><span class="ws">                </span>self, &quot;Failed to establish a new connection: %s&quot; % e</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return conn</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2491382820000">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\adapters.py"</cite>,
      line <em class="line">439</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>timeout = TimeoutSauce(connect=timeout, read=timeout)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>if not chunked:</pre>
<pre class="line current"><span class="ws">                </span>resp = conn.urlopen(</pre>
<pre class="line after"><span class="ws">                    </span>method=request.method,</pre>
<pre class="line after"><span class="ws">                    </span>url=url,</pre>
<pre class="line after"><span class="ws">                    </span>body=request.body,</pre>
<pre class="line after"><span class="ws">                    </span>headers=request.headers,</pre>
<pre class="line after"><span class="ws">                    </span>redirect=False,</pre></div>
</div>

<li><div class="frame" id="frame-2491382819760">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py"</cite>,
      line <em class="line">755</em>,
      in <code class="function">urlopen</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:</pre>
<pre class="line before"><span class="ws">                </span>e = ProxyError(&quot;Cannot connect to proxy.&quot;, e)</pre>
<pre class="line before"><span class="ws">            </span>elif isinstance(e, (SocketError, HTTPException)):</pre>
<pre class="line before"><span class="ws">                </span>e = ProtocolError(&quot;Connection aborted.&quot;, e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>retries = retries.increment(</pre>
<pre class="line after"><span class="ws">                </span>method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]</pre>
<pre class="line after"><span class="ws">            </span>)</pre>
<pre class="line after"><span class="ws">            </span>retries.sleep()</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span># Keep track of the error for the retry warning.</pre></div>
</div>

<li><div class="frame" id="frame-2491382820096">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\urllib3\util\retry.py"</cite>,
      line <em class="line">574</em>,
      in <code class="function">increment</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>other=other,</pre>
<pre class="line before"><span class="ws">            </span>history=history,</pre>
<pre class="line before"><span class="ws">        </span>)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if new_retry.is_exhausted():</pre>
<pre class="line current"><span class="ws">            </span>raise MaxRetryError(_pool, url, error or ResponseError(cause))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>log.debug(&quot;Incremented Retry for (url='%s'): %r&quot;, url, new_retry)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return new_retry</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-2491382791760">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-2491382792144">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2491382792048">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">272</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2491382790848">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-2491382792096">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\_compat.py"</cite>,
      line <em class="line">38</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line current"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line after"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre></div>
</div>

<li><div class="frame" id="frame-2491382816880">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2491382816832">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-2491382817504">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">272</em>,
      in <code class="function">error_router</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>
<pre class="line before"><span class="ws">            </span>except Exception:</pre>
<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>
<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>
<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2491382819184">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-2491382816976">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\_compat.py"</cite>,
      line <em class="line">38</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line current"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line after"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre></div>
</div>

<li><div class="frame" id="frame-2491382819424">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-2491382819280">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2491382818416">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">468</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param resource: The resource as a flask view function</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>@wraps(resource)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = resource(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">                </span>return resp</pre>
<pre class="line after"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>
<pre class="line after"><span class="ws">        </span>return wrapper</pre></div>
</div>

<li><div class="frame" id="frame-2491382817744">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask\views.py"</cite>,
      line <em class="line">89</em>,
      in <code class="function">view</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>constructor of the class.</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>def view(*args, **kwargs):</pre>
<pre class="line before"><span class="ws">            </span>self = view.view_class(*class_args, **class_kwargs)</pre>
<pre class="line current"><span class="ws">            </span>return self.dispatch_request(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if cls.decorators:</pre>
<pre class="line after"><span class="ws">            </span>view.__name__ = name</pre>
<pre class="line after"><span class="ws">            </span>view.__module__ = cls.__module__</pre>
<pre class="line after"><span class="ws">            </span>for decorator in cls.decorators:</pre></div>
</div>

<li><div class="frame" id="frame-2491382820576">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">583</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>decorators = self.method_decorators</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>for decorator in decorators:</pre>
<pre class="line before"><span class="ws">            </span>meth = decorator(meth)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>resp = meth(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>
<pre class="line after"><span class="ws">            </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>representations = self.representations or OrderedDict()</pre></div>
</div>

<li><div class="frame" id="frame-2491382819376">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py"</cite>,
      line <em class="line">675</em>,
      in <code class="function">wrapper</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.envelope = envelope</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, f):</pre>
<pre class="line before"><span class="ws">        </span>@wraps(f)</pre>
<pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>
<pre class="line current"><span class="ws">            </span>resp = f(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">            </span>if isinstance(resp, tuple):</pre>
<pre class="line after"><span class="ws">                </span>data, code, headers = unpack(resp)</pre>
<pre class="line after"><span class="ws">                </span>return marshal(data, self.fields, self.envelope), code, headers</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>return marshal(resp, self.fields, self.envelope)</pre></div>
</div>

<li><div class="frame" id="frame-2491382817936">
  <h4>File <cite class="filename">"C:\Users\asus\PycharmProjects\Homework\DOS\Catalog2.py"</cite>,
      line <em class="line">72</em>,
      in <code class="function">put</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>result = Storage.query.filter_by(ID=idreq).first()</pre>
<pre class="line before"><span class="ws">        </span>result.stock = result.stock - 1</pre>
<pre class="line before"><span class="ws">        </span>if result.stock &lt; 0:</pre>
<pre class="line before"><span class="ws">            </span>result.stock = result.stock + 1</pre>
<pre class="line before"><span class="ws">        </span>db.session.commit()</pre>
<pre class="line current"><span class="ws">        </span>requests.put(&quot;http://&quot; + BASE + &quot;:8000/&quot; + &quot;update2/&quot; + str(idreq))</pre>
<pre class="line after"><span class="ws">        </span>requests.put(&quot;http://&quot; + BASE2 + &quot;:6000/&quot; + &quot;cache/&quot; + str(idreq))</pre>
<pre class="line after"><span class="ws">        </span>requests.put(&quot;http://&quot; + BASE2 + &quot;:6000/&quot; + &quot;cache2/&quot; + result.topic)</pre>
<pre class="line after"><span class="ws">        </span>return result</pre>
<pre class="line after"><span class="ws"></span>class Update2(Resource):</pre>
<pre class="line after"><span class="ws">    </span>@marshal_with(resource_fields)</pre></div>
</div>

<li><div class="frame" id="frame-2491382818080">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\api.py"</cite>,
      line <em class="line">132</em>,
      in <code class="function">put</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param \*\*kwargs: Optional arguments that ``request`` takes.</pre>
<pre class="line before"><span class="ws">    </span>:return: :class:`Response &lt;Response&gt;` object</pre>
<pre class="line before"><span class="ws">    </span>:rtype: requests.Response</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>return request('put', url, data=data, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def patch(url, data=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a PATCH request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2491382819520">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\api.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># By using the 'with' statement we are sure the session is closed, thus we</pre>
<pre class="line before"><span class="ws">    </span># avoid leaving sockets open which can trigger a ResourceWarning in some</pre>
<pre class="line before"><span class="ws">    </span># cases, and look like a memory leak in others.</pre>
<pre class="line before"><span class="ws">    </span>with sessions.Session() as session:</pre>
<pre class="line current"><span class="ws">        </span>return session.request(method=method, url=url, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def get(url, params=None, **kwargs):</pre>
<pre class="line after"><span class="ws">    </span>r&quot;&quot;&quot;Sends a GET request.</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2491382819232">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\sessions.py"</cite>,
      line <em class="line">542</em>,
      in <code class="function">request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>send_kwargs = {</pre>
<pre class="line before"><span class="ws">            </span>'timeout': timeout,</pre>
<pre class="line before"><span class="ws">            </span>'allow_redirects': allow_redirects,</pre>
<pre class="line before"><span class="ws">        </span>}</pre>
<pre class="line before"><span class="ws">        </span>send_kwargs.update(settings)</pre>
<pre class="line current"><span class="ws">        </span>resp = self.send(prep, **send_kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return resp</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def get(self, url, **kwargs):</pre>
<pre class="line after"><span class="ws">        </span>r&quot;&quot;&quot;Sends a GET request. Returns :class:`Response` object.</pre></div>
</div>

<li><div class="frame" id="frame-2491382819904">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\sessions.py"</cite>,
      line <em class="line">655</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Start time (approximately) of the request</pre>
<pre class="line before"><span class="ws">        </span>start = preferred_clock()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># Send the request</pre>
<pre class="line current"><span class="ws">        </span>r = adapter.send(request, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># Total elapsed time of the request (approximately)</pre>
<pre class="line after"><span class="ws">        </span>elapsed = preferred_clock() - start</pre>
<pre class="line after"><span class="ws">        </span>r.elapsed = timedelta(seconds=elapsed)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2491382819856">
  <h4>File <cite class="filename">"C:\Python\Python39\Lib\site-packages\requests\adapters.py"</cite>,
      line <em class="line">516</em>,
      in <code class="function">send</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>if isinstance(e.reason, _SSLError):</pre>
<pre class="line before"><span class="ws">                </span># This branch is for urllib3 v1.22 and later.</pre>
<pre class="line before"><span class="ws">                </span>raise SSLError(e, request=request)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>raise ConnectionError(e, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except ClosedPoolError as e:</pre>
<pre class="line after"><span class="ws">            </span>raise ConnectionError(e, request=request)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>except _ProxyError as e:</pre></div>
</div>
</ul>
  <blockquote>requests.exceptions.ConnectionError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connection.py&quot;, line 174, in _new_conn
    conn = connection.create_connection(
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py&quot;, line 96, in create_connection
    raise err
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py&quot;, line 86, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py&quot;, line 699, in urlopen
    httplib_response = self._make_request(
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py&quot;, line 394, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connection.py&quot;, line 239, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File &quot;C:\Python\Python39\Lib\http\client.py&quot;, line 1253, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File &quot;C:\Python\Python39\Lib\http\client.py&quot;, line 1299, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File &quot;C:\Python\Python39\Lib\http\client.py&quot;, line 1248, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File &quot;C:\Python\Python39\Lib\http\client.py&quot;, line 1008, in _send_output
    self.send(msg)
  File &quot;C:\Python\Python39\Lib\http\client.py&quot;, line 948, in send
    self.connect()
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connection.py&quot;, line 205, in connect
    conn = self._new_conn()
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connection.py&quot;, line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;C:\Python\Python39\Lib\site-packages\requests\adapters.py&quot;, line 439, in send
    resp = conn.urlopen(
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py&quot;, line 755, in urlopen
    retries = retries.increment(
  File &quot;C:\Python\Python39\Lib\site-packages\urllib3\util\retry.py&quot;, line 574, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py&quot;, line 272, in error_router
    return original_handler(e)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\_compat.py&quot;, line 38, in reraise
    raise value.with_traceback(tb)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py&quot;, line 272, in error_router
    return original_handler(e)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\_compat.py&quot;, line 38, in reraise
    raise value.with_traceback(tb)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;C:\Python\Python39\Lib\site-packages\flask\app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py&quot;, line 468, in wrapper
    resp = resource(*args, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\flask\views.py&quot;, line 89, in view
    return self.dispatch_request(*args, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py&quot;, line 583, in dispatch_request
    resp = meth(*args, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py&quot;, line 675, in wrapper
    resp = f(*args, **kwargs)
  File &quot;C:\Users\asus\PycharmProjects\Homework\DOS\Catalog2.py&quot;, line 72, in put
    requests.put(&quot;http://&quot; + BASE + &quot;:8000/&quot; + &quot;update2/&quot; + str(idreq))
  File &quot;C:\Python\Python39\Lib\site-packages\requests\api.py&quot;, line 132, in put
    return request('put', url, data=data, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\requests\api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\requests\sessions.py&quot;, line 542, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\requests\sessions.py&quot;, line 655, in send
    r = adapter.send(request, **kwargs)
  File &quot;C:\Python\Python39\Lib\site-packages\requests\adapters.py&quot;, line 516, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Python\Python39\Lib\site-packages\urllib3\connection.py", line 174, in _new_conn
    conn = connection.create_connection(
  File "C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py", line 96, in create_connection
    raise err
  File "C:\Python\Python39\Lib\site-packages\urllib3\util\connection.py", line 86, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py", line 699, in urlopen
    httplib_response = self._make_request(
  File "C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py", line 394, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python\Python39\Lib\site-packages\urllib3\connection.py", line 239, in request
    super(HTTPConnection, self).request(method, url, body=body, headers=headers)
  File "C:\Python\Python39\Lib\http\client.py", line 1253, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Python\Python39\Lib\http\client.py", line 1299, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python\Python39\Lib\http\client.py", line 1248, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Python\Python39\Lib\http\client.py", line 1008, in _send_output
    self.send(msg)
  File "C:\Python\Python39\Lib\http\client.py", line 948, in send
    self.connect()
  File "C:\Python\Python39\Lib\site-packages\urllib3\connection.py", line 205, in connect
    conn = self._new_conn()
  File "C:\Python\Python39\Lib\site-packages\urllib3\connection.py", line 186, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python\Python39\Lib\site-packages\requests\adapters.py", line 439, in send
    resp = conn.urlopen(
  File "C:\Python\Python39\Lib\site-packages\urllib3\connectionpool.py", line 755, in urlopen
    retries = retries.increment(
  File "C:\Python\Python39\Lib\site-packages\urllib3\util\retry.py", line 574, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py", line 272, in error_router
    return original_handler(e)
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Python\Python39\Lib\site-packages\flask\_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py", line 272, in error_router
    return original_handler(e)
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Python\Python39\Lib\site-packages\flask\_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Python\Python39\Lib\site-packages\flask\app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py", line 468, in wrapper
    resp = resource(*args, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\flask\views.py", line 89, in view
    return self.dispatch_request(*args, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py", line 583, in dispatch_request
    resp = meth(*args, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\flask_restful\__init__.py", line 675, in wrapper
    resp = f(*args, **kwargs)
  File "C:\Users\asus\PycharmProjects\Homework\DOS\Catalog2.py", line 72, in put
    requests.put("http://" + BASE + ":8000/" + "update2/" + str(idreq))
  File "C:\Python\Python39\Lib\site-packages\requests\api.py", line 132, in put
    return request('put', url, data=data, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\requests\api.py", line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\requests\sessions.py", line 542, in request
    resp = self.send(prep, **send_kwargs)
  File "C:\Python\Python39\Lib\site-packages\requests\sessions.py", line 655, in send
    r = adapter.send(request, **kwargs)
  File "C:\Python\Python39\Lib\site-packages\requests\adapters.py", line 516, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='192.168.1.123', port=8000): Max retries exceeded with url: /update2/1 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0000024411FC7DF0>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

-->

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

{
    "ID": 1,
    "name": "RPCs for Noobs",
    "topic": "distributed systems",
    "stock": 0,
    "cost": 100
}

